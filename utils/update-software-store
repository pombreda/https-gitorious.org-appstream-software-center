#!/usr/bin/python
# Copyright (C) 2009 Canonical
#
# Authors:
#  Michael Vogt
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


import apt
import dbus
import dbus.service
import glib
import gobject
import locale
import logging
import os
import sys
import xapian
from dbus.mainloop.glib import DBusGMainLoop


try:
    from softwarestore.enums import *
except ImportError:
    # support running from the dir too
    d = os.path.dirname(os.path.abspath(os.path.join(os.getcwd(),__file__)))
    sys.path.insert(0, os.path.split(d)[0])
    from softwarestore.enums import *

try:
    from softwarestore.db.update import rebuild_database
except ImportError:
    # support running from the dir too
    d = os.path.dirname(os.path.abspath(os.path.join(os.getcwd(),__file__)))
    sys.path.insert(0, os.path.split(d)[0])
    from softwarestore.db.update import update

class UpdateSoftwareStoreDbus(dbus.service.Object):
    """ 
    This is a helper to provide the UpdateSoftwareStoreIFace
    """
    def __init__(self, bus_name,
                 object_path='/com/ubuntu/SoftwareStore'):
        dbus.service.Object.__init__(self, bus_name, object_path)

    @dbus.service.method('com.ubuntu.SoftwareStore')
    def IsRebuilding(self):
        return True
    @dbus.service.signal(dbus_interface='com.ubuntu.SoftwareStore',
                         signature='b')
    def DatabaseRebuilding(self, isRebuilding):
        logging.debug("Sending DatabaseRebuilding signal '%s'" % isRebuilding)

if __name__ == "__main__":
    #logging.basicConfig(level=logging.DEBUG)
    try:
        locale.setlocale(locale.LC_ALL, "")
    except Exception, e:
        logging.exception("setlocale failed")

    # setup dbus
    dbus_controller = None
    try:
        DBusGMainLoop(set_as_default=True)
        bus = dbus.SystemBus()
        bus_name = dbus.service.BusName('com.ubuntu.SoftwareStore', bus)
        dbus_controller = UpdateSoftwareStoreDbus(bus_name)
        dbus_controller.DatabaseRebuilding(True)
    except:
        logging.exception("dbus failure (ignoring")

    # rebuild and send signal when done
    try:
        # setup path
        pathname = os.path.join(XAPIAN_BASE_PATH, "xapian")
        if not os.path.exists(pathname):
            os.makedirs(pathname)
        # rebuild the database, the default context is run to ensure
        # dbus querries are processed
        rebuild_database(pathname)
    finally:
        # signal that the xapian db is valid again
        if dbus_controller:
            dbus_controller.DatabaseRebuilding(False)
            context = glib.main_context_default()
            while context.pending():
                context.iteration()
    
